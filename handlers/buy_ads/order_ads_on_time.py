import json
import datetime
import pytz
import os
import random
import string

from aiogram.types import Message, CallbackQuery
from aiogram.utils.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton,InlineKeyboardMarkup, InputMediaPhoto
from aiogram.dispatcher.storage import FSMContext
from aiogram.utils.exceptions import CantParseEntities
from aiogram.utils.exceptions import BadRequest

from keyboards.inline.post_confirmation import post_confirmation_with_kb
from handlers.buy_ads.theme_channel_info_call import condition
from keyboards.inline import post_confirmation
from loader import pgbotdb,dp
from data.config import CLIENT_ID,CLIENT_SECRET
from states.post import POST
from imgurpython import ImgurClient


channel_info_callback = CallbackData('channel_info', 'id', 'page', "sort_by", 'reverse')
Order_callback = CallbackData('order_ads', "id", "condition","time")


# pgbotdb.deploy_post(channel_id=84557, advertiser_id=3498,name='–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–±', date_of_post=post_date)

from.theme_channel_info_call import theme_channel_info_callback
@dp.callback_query_handler(text_contains='buy_s_time$')
async def buy_s_time(call: CallbackQuery):
    print(call.data)
    id = call.data.split('$')[1]
    conditions = call.data.split('$')[2]
    channel_times = pgbotdb.select_channel(channel_id=call.data.split('$')[1])[-1]
    channel_times = json.loads(channel_times)
    #—Å—Ä–∞–≤–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å —É–∂–µ –∑–∞–∫–∞–∑–∞–Ω–∏–º–∏ —Ä–µ–∫–ª–∞–º–∞–º–∏ —ñ –¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–∏–µ
    # –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –í–ò–ë–û–†–ê–í –í–†–ï–ú–ï–ù–ò –ü–û–°–¢–û–í
    kb = await time_keyboard(channel_times=channel_times,conditions=conditions,id=id,user_id=call.from_user.id)
    #C–º–µ–Ω–∞ —Ñ–æ—Ç–æ
    await dp.bot.edit_message_media(chat_id=call.from_user.id, message_id=call.message.message_id,
    media=InputMediaPhoto(media='https://i.imgur.com/xge2Ik1.png'))
    #change text
    await dp.bot.edit_message_caption(chat_id=call.from_user.id, message_id=call.message.message_id,
    caption='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è ü¶ã-—Å–≤–æ–±–æ–¥–Ω–æ, ‚ùå-–∑–∞–Ω—è—Ç–æ',
    reply_markup=kb)


@dp.callback_query_handler(text="ignore237482374a",state=None)
async def order_ads_time(call: CallbackQuery,state: FSMContext):
    """–ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ –¥–µ–ª–∞–µ–º"""
    await call.answer(text = '–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ –∏–ª–∏ –∑–∞–Ω—è—Ç–æ (')


@dp.callback_query_handler(text_contains=["order_ads$"],state=None)
async def order_ads_time(call: CallbackQuery,state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –ø–æ—Å–ª–µ –≤–∏–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    print(call.data)
    cb = call.data.split('$')
    channel_id = cb[1]
    condition =cb[2]
    time = cb[3]
    channel_info = pgbotdb.select_channel(channel_id)
    admin_id = channel_info[2]
    channel_link = channel_info[4]
    identifier = get_random_string(8)
    #TO_M
    # await call.message.edit_media(media=InputMediaPhoto('https://i.imgur.com/iI95wyg.png'))
    kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('–ù–∞–∑–∞–¥',callback_data='choose_what_to_do_from_all_channels')]])
    # await call.message.edit_caption(caption='–û—Ç–ø—Ä–∞–≤–ª—å—Ç–µ –ø–æ—Å—Ç –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ',reply_markup=kb)
    # await POST.post.set()
    # async with state.proxy() as post:
    #     post['channel_id']  = channel_id 
    #     post['condition'] =  condition
    #     post['time'] = time 
    chan_cond = pgbotdb.get_conditions(channel_id)
        # post['post_price'] =  post_price
    post_price = [c_cond[1] for c_cond in chan_cond \
                              if c_cond[0]== condition]
    print('channel_id', channel_id, 'condition', condition, 'time', time, 'post price',post_price)
    await call.message.answer(
    text=f"""<code>@ADX_INC_bot order:{identifier}</code>
–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É <a href='tg://user?id={admin_id}'>ü¶ãAdminü¶ã</a> """,reply_markup=kb,parse_mode='HTML')
    pgbotdb.add_order_link_for_admin(identifier, channel_id,channel_link,condition, post_price[0],time)




@dp.message_handler(state=POST.post,content_types=["photo", "text"])#,content_types=['photo', 'text']
async def order_ads_time(message: Message,state:FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ"""
    text = ''
    file_id = int
    if message.media_group_id != None:
        return await dp.bot.send_message(message.from_user.id,'–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 2+ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–∏—è ^ ^')
    else:
        try:
            file_id = message.photo[-1].file_id
            text = message.caption
            await message.photo[-1].download(f'adx_graph/template/post_images/post_image_{message.photo[-1].file_id[1:7]}.png')
            image_dir = f'adx_graph/template/post_images/post_image_{message.photo[-1].file_id[1:7]}.png'
            img_link = save_img_imgur(image_dir)
            print(img_link)
            os.remove(image_dir) 
            image_dir = ''
        except IndexError:
            img_link = 0
            text = message.text
    async with state.proxy() as post:
        post['ordered_by_id']= message.from_user.id
        post['text']= text
        post['pictue_id'] = img_link #file_id
        post['parse_mode']= 'HTML'
        post['time_in_channel']= post['time'] 
        if post['condition'] == '–ë–µ—Å—Å—Ä–æ—á–Ω–æ':
            post['end_of_post'] = datetime.datetime.now(pytz.timezone('Europe/Moscow')) + datetime.timedelta(days=30000)
            print(post['time'])
            print(post['end_of_post'])
        else:
            add_hours = post['condition'].split('/')[1]
            post_date = datetime.datetime.strptime(post['time'], '%Y-%m-%d %H:%M:%S')
            end_date = post_date + datetime.timedelta(hours=int(add_hours))
            print(post_date)
            print(end_date)
            post['end_of_post'] = end_date 
        post['confirmed']= 'False' #TO DO –°–º–µ–Ω–∏—Ç—å –Ω–∞ False –ø—Ä–∏ –≤–∏–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂—É—Ö–∏

        if img_link == 0:
            try:
                await dp.bot.send_message(chat_id=message.from_user.id, text=text + '\n\n‚ö† –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç, –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ^ ^',
            reply_markup=post_confirmation)
            except CantParseEntities:
                await dp.bot.send_message(chat_id=message.from_user.id, text='\n\n‚ö†–í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –Ω–µ –≤–µ—Ä–Ω—ã–π —Ç–µ–≥ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ ^ ^\n –ú–æ–∂–µ—Ç–µ —Å–ª–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
        else:
            # await dp.bot.send_media_group(chat_id=ADMIN, media=mg)
            # await dp.bot.send_media_group(chat_id=ADMIN,media=message.media_group_id)
            try:
                await dp.bot.send_photo(message.from_user.id, file_id, text + '\n\n‚ö† –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç, –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ^ ^',
            reply_markup=post_confirmation)
            except TypeError: 
                await dp.bot.send_message(chat_id=message.from_user.id, text="" + '\n\n‚ö† –ü–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ^ ^')
            except CantParseEntities:
                await dp.bot.send_message(chat_id=message.from_user.id, text='\n\n‚ö†–í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –Ω–µ –≤–µ—Ä–Ω—ã–π —Ç–µ–≥ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ ^ ^\n –ú–æ–∂–µ—Ç–µ —Å–ª–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
        

# –º–µ–¥–∏–∞ –≥—Ä—É–ø
# @dp.message_handler(state=POST.post,content_types=[ContentType.DOCUMENT, ContentType.TEXT])#,content_types=['photo', 'text']
# async def order_ads_time(message: Message,state:FSMContext):
#     if message.media_group_id != None:
#         return await dp.bot.send_message(message.from_user.id,'–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 2+ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–∏—è ^ ^')


@dp.callback_query_handler(state=POST.post,text="add_button_to_post")
async def post_conf(call: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É"""
    print("–ê–¥–¥ –ë–∏—Ç—Ç–æ–Ω")
    await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å–≤–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É.\n—Ç–µ–∫—Å—Ç = url, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "," –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ. \n–ü—Ä–∏–º–µ—Ä: \nADX = https://t.me/adx_inc_bot, ADX CHAT = https://t.me/adx_community\n\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏, –ø—Ä–∏—à–ª–∏—Ç–µ "-"')
    await POST.kb.set()


@dp.message_handler(state=POST.kb)
async def get_kb_for_post(mg:Message, state: FSMContext):
    photo_true = True
    async with state.proxy() as post: 
        if post['pictue_id'] == 0:
            photo_true = False
        if mg.text == '-' or mg.text == '"-"':
            post['kb'] == '-'
            if not photo_true:
                post_kb = await send_post_without_photo(chat_id=mg.from_user.id,text=post['text'])
            else:
                post_kb = await send_post_with_photo(chat_id=mg.from_user.id,picture_id=post['pictue_id'], text=post['text'])
        else: 
            if not photo_true:
                post_kb = await send_post_without_photo(chat_id=mg.from_user.id,text=post['text'],kb=mg.text)
            else:
                post_kb = await send_post_with_photo(chat_id=mg.from_user.id,picture_id=post['pictue_id'], text=post['text'],kb=mg.text)
        post['kb'] = json.dumps(post_kb)
    await POST.post.set()



@dp.callback_query_handler(state=POST.post,text="post_confirmation")
async def post_conf(call: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    print("OKEEEEEEY")
    # async with state.proxy() as post:
        # post['channel_id']
        # post['ordered_by_id']
        # post['text']
        # post['pictue_id'] 
        # post['parse_mode']
        # post['post_price']#1/24
        # post['time_in_channel']
        # post['end_of_post']
        # post['confirmed']
    await call.message.delete()
    await call.message.answer('–í–∞—à –ø–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –æ–ø–ª–∞—Ç–∏—Ç—å ü¶ã',
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton('Qiwi/–ö–∞—Ä—Ç–∞', callback_data='qiwi_pay')],[InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_btn')]]))
#–æ–ø–ª–∞—Ç–∞


def callback_time_for_posts(add_days:int, channel_times: list,conditions,id,posts):
    """–°–û–ó–î–ê–ï–¢ –õ–ò–°–¢ –° –í–†–ï–ú–ï–ù–ï–ú –î–õ–Ø –¢–ï–ö–°–¢–ê –ò –î–ê–¢–û–ô –ü–û–°–¢–ê –î–õ–Ø –ö–û–õ–ë–ï–ö–ê"""
    available = 'ü¶ã'
    not_available = '‚ùå'
    btns = []
    date_now = datetime.datetime.now(pytz.timezone('Europe/Moscow')).date()
    if add_days != 0:date_now = date_now + datetime.timedelta(days=add_days)
    for time in channel_times:
        not_available_date = ''
        date_format = str(date_now) +' '+ time + ":00"
        post_date = datetime.datetime.strptime(date_format,'%Y-%m-%d %H:%M:%S')
        for post in posts:
            if int(post[1]) == int(id) and post[7]==post_date:
                not_available_date = post_date
        if not_available_date != '':
            btns.append(InlineKeyboardButton(text=time+not_available, callback_data=f'ignore237482374a'))   #'ignore237482374a'
        elif post_date+datetime.timedelta(minutes=15)<=datetime.datetime.now():
            btns.append(InlineKeyboardButton(text=time+not_available, callback_data=f'ignore237482374a'))   #'ignore237482374a'
        else:
            btns.append(InlineKeyboardButton(text=time+available, callback_data=f'order_ads${id}${conditions}${post_date}'))
    
    return btns



async def time_keyboard(channel_times, conditions, id, user_id):
    posts = pgbotdb.get_posts()
    kb = InlineKeyboardMarkup(row_width=3)
    kb.row(InlineKeyboardButton(text='–°–µ–≥–æ–¥–Ω—è', callback_data='948397530'))
    btns1 = callback_time_for_posts(add_days=0, channel_times=channel_times, conditions = conditions,id=id,posts=posts)
    print(btns1)
    # btns1 =(InlineKeyboardButton(text=time, callback_data=f'order_ads${id}${conditions}${date}') for time,date in cb_today)
    kb.add(*btns1)
    kb.row(InlineKeyboardButton(text='–ó–∞–≤—Ç—Ä–∞', callback_data='ignore'))
    btns2 = callback_time_for_posts(add_days=1, channel_times=channel_times, conditions = conditions,id=id,posts=posts)
    kb.add(*btns2)
    kb.row(InlineKeyboardButton(text='–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', callback_data='ignore'))
    btns3 = callback_time_for_posts(add_days=2, channel_times=channel_times, conditions = conditions,id=id,posts=posts)
    kb.add(*btns3)
    cb_info = pgbotdb.select_user_back_from_times(user_id=user_id)
    print('cb_infoooooooooooooooooooooooooooooooooo')
    print(cb_info)
    if cb_info[6] == '-':
        kb.row(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=channel_info_callback.new(cb_info[1+1], cb_info[2+1], cb_info[3+1], cb_info[4+1])))
    else: kb.row(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=theme_channel_info_callback.new(cb_info[1+1], cb_info[2+1], cb_info[3+1], cb_info[4+1], cb_info[5+1])))
    return kb



def save_img_imgur(file_dir,client_id = CLIENT_ID,client_secret = CLIENT_SECRET):
    client = ImgurClient(client_id, client_secret)
    r = client.upload_from_path(file_dir, config=None, anon=True)
    return r['link']


async def send_post_without_photo(chat_id,text, kb='-',rm=post_confirmation):
    if kb!='-':
        post_kb = kb.split(',')
        kb = post_kb
        rm = post_confirmation_with_kb(post_kb)
    try:
        await dp.bot.send_message(chat_id=chat_id, text=text + '\n\n‚ö† –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç, –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ^ ^',
    reply_markup=rm)
    except CantParseEntities:
        await dp.bot.send_message(chat_id=chat_id, text='\n\n‚ö†–í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –Ω–µ –≤–µ—Ä–Ω—ã–π —Ç–µ–≥ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ ^ ^\n –ú–æ–∂–µ—Ç–µ —Å–ª–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
    except BadRequest: 
        await dp.bot.send_message(chat_id=chat_id, text="" + '\n\n‚ö† –°—Å—ã–ª–∫–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑^ ^')
    return kb
    

async def send_post_with_photo(chat_id,picture_id, text, kb='-',rm=post_confirmation):
    if kb!='-':
        kb = kb.split(',')
        rm = post_confirmation_with_kb(kb)
    try:
        await dp.bot.send_photo(chat_id, picture_id, text + '\n\n‚ö† –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç, –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ^ ^',
    reply_markup=rm)
    except TypeError: 
        await dp.bot.send_message(chat_id=chat_id, text="" + '\n\n‚ö† –ü–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ^ ^')
    except CantParseEntities:
        await dp.bot.send_message(chat_id=chat_id, text='\n\n‚ö†–í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –Ω–µ –≤–µ—Ä–Ω—ã–π —Ç–µ–≥ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ ^ ^\n –ú–æ–∂–µ—Ç–µ —Å–ª–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
    except BadRequest: 
        await dp.bot.send_message(chat_id=chat_id, text="" + '\n\n‚ö† –°—Å—ã–ª–∫–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑^ ^')
    return kb

def get_random_string(length):
    result_str = ''.join(random.choice(string.ascii_letters) for i in range(length))
    return result_str