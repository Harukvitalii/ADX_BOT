import json
from aiogram.types.callback_query import CallbackQuery
from aiogram.types.message import Message
from aiogram import types
from keyboards.inline import cancel_btn, cancel_btn_with_channel_id_faq, end_channel_setup
from keyboards.inline import my_channels,change_channel_parameters,change_channel_row,back_to_channel_rows
from loader import dp, pgbotdb
from aiogram.dispatcher.storage import FSMContext
from aiogram.types.callback_query import CallbackQuery
import asyncio,copy
from keyboards.inline.callback_data import my_channels_callback
from states.change_channel import CHANGE_ID, CHANGE_banned,CHANGE_comment,CHANGE_description,CHANGE_LINK,CHANGE_NAME,CHANGE_price,CHANGE_theme,CHANGE_time



@dp.callback_query_handler(text = "change_channel_settings")
async def change_chanel(call: CallbackQuery):
    await call.message.edit_text(text='ü¶ã–í–∞—à–∏ –∫–∞–Ω–∞–ª–∏', reply_markup=my_channels(call.from_user.id))



@dp.callback_query_handler(my_channels_callback.filter(lvl='1'))
async def change_chanel(call: CallbackQuery, callback_data:dict):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    print(channel[1])
    await call.message.edit_text(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))


@dp.callback_query_handler(my_channels_callback.filter(row="channel_id"),state=None)
async def change_chanel(call: CallbackQuery, callback_data:dict,state: FSMContext):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    await call.message.answer(f'–í–∞—à –∞–π–¥–∏: {channel[1]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–µ –Ω–æ–≤—ã–π –∞–π–¥–∏:\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏—à–ª–∏—Ç–µ "-"')
    await CHANGE_ID.id.set()
    async with state.proxy() as change:
        change["channel_id"] = channel[1]


@dp.message_handler(state=CHANGE_ID.id)
async def change_id(message:Message, state: FSMContext):
    async with state.proxy() as change:
        if message.text=='-':
            channel = pgbotdb.select_channel(change["channel_id"])
            await message.answer('–û–ö')
            await state.finish()
            await message.answer(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
        else:
            channel_id_new = message.text
                # pgbotdb.change_channel_id(channel_id, channel_id_new)
            await message.answer(f'–ê–π–¥–∏ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {channel_id_new}', reply_markup=back_to_channel_rows(change["channel_id"]))
            await state.finish()



@dp.callback_query_handler(my_channels_callback.filter(row="name"),state=None)
async def change_name___1(call: CallbackQuery, callback_data:dict,state: FSMContext):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    await call.message.answer(f'–ò–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞: {channel[3]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–µ –Ω–æ–≤–æ–µ –∏–º—è:\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏—à–ª–∏—Ç–µ "-"')
    await CHANGE_NAME.name.set()
    async with state.proxy() as change:
        change["channel_id"] = channel[1]

@dp.message_handler(state=CHANGE_NAME.name)
async def change_name(message:Message, state: FSMContext):
    async with state.proxy() as change:
        if message.text=='-':
            channel = pgbotdb.select_channel(change["channel_id"])
            await message.answer('–û–ö')
            await state.finish()
            await message.answer(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
        else:
            new_name = message.text
                # pgbotdb.change_channel_id(channel_id, channel_id_new)
            pgbotdb.channel_change_name(change["channel_id"], new_name)
            await message.answer(f'–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}', reply_markup=back_to_channel_rows(change["channel_id"]))
            await state.finish()


@dp.callback_query_handler(my_channels_callback.filter(row="link"))
async def change_chanel(call: CallbackQuery, callback_data:dict,state: FSMContext):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    await call.message.answer(f'–°—Å—ã–ª–∫–∞ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞: {channel[4]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏—à–ª–∏—Ç–µ "-"', disable_web_page_preview=True)
    await CHANGE_LINK.link.set()
    async with state.proxy() as change:
        change["channel_id"] = channel[1]
@dp.message_handler(state=CHANGE_LINK.link)
async def change_name(message:Message, state: FSMContext):
    async with state.proxy() as change:
        if message.text=='-':
            channel = pgbotdb.select_channel(change["channel_id"])
            await message.answer('–û–ö')
            await state.finish()
            await message.answer(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
        else:
            new_link = message.text
                # pgbotdb.change_channel_id(channel_id, channel_id_new)
            pgbotdb.channel_change_link(change["channel_id"], new_link)
            await message.answer(f'–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_link}', reply_markup=back_to_channel_rows(change["channel_id"]))
            await state.finish()


@dp.callback_query_handler(my_channels_callback.filter(row="comment"))
async def change_chanel(call: CallbackQuery, callback_data:dict,state: FSMContext):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    await call.message.answer(f'–°—Ç–∞—Ä—ã–π –∫–æ–º–µ–Ω—Ç: {channel[6]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–µ–Ω—Ç–∞—Ä—ã–π:\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏—à–ª–∏—Ç–µ "-"')
    await CHANGE_comment.comment.set()
    async with state.proxy() as change:
        change["channel_id"] = channel[1]
@dp.message_handler(state=CHANGE_comment.comment)
async def change_name(message:Message, state: FSMContext):
    async with state.proxy() as change:
        if message.text=='-':
            channel = pgbotdb.select_channel(change["channel_id"])
            await message.answer('–û–ö')
            await state.finish()
            await message.answer(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
        else:
            new_comment = message.text
                # pgbotdb.change_channel_id(channel_id, channel_id_new)
            pgbotdb.channel_change_comment(change["channel_id"], new_comment)
            await message.answer(f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä—ã–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_comment}', reply_markup=back_to_channel_rows(change["channel_id"]))
            await state.finish()

    
@dp.callback_query_handler(my_channels_callback.filter(row="description"))
async def change_chanel(call: CallbackQuery, callback_data:dict,state: FSMContext):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    await call.message.answer(f'–°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ: {channel[5]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ:\n‚ö†Ô∏è–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ –º–µ–Ω—è—Ç—å –ø—Ä–∏—à–ª–∏—Ç–µ "-"')
    await CHANGE_description.description.set()
    async with state.proxy() as change:
        change["channel_id"] = channel[1]
@dp.message_handler(state=CHANGE_description.description)
async def change_name(message:Message, state: FSMContext):
    async with state.proxy() as change:
        if message.text=='-':
            channel = pgbotdb.select_channel(change["channel_id"])
            await message.answer('–û–ö')
            await state.finish()
            await message.answer(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
        else:
            new_description = message.text
                # pgbotdb.change_channel_id(channel_id, channel_id_new)
            pgbotdb.channel_change_description(change["channel_id"], new_description)
            await message.answer(f'–û–ø–∏—Å–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_description}', reply_markup=back_to_channel_rows(change["channel_id"]))
            await state.finish()


from keyboards.inline import end_setup_time
@dp.callback_query_handler(my_channels_callback.filter(row="times_for_posts"))
async def change_chanel(call: CallbackQuery, callback_data:dict,state: FSMContext):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    await call.message.answer(text= f'–í–∞—à–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–æ–≤ {channel[9]}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ù–û–í–û–ï –≤—Ä–µ–º—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ ",":\n–ü—Ä–∏–º–µ—Ä:\n11:30, 14:00...')
    await CHANGE_time.time.set()
    async with state.proxy() as change:
        change["channel_id"] = channel[1]
@dp.message_handler(state=CHANGE_time.time)
async def change_name(message:Message, state: FSMContext):
    async with state.proxy() as change:
        if message.text=='-':
            channel = pgbotdb.select_channel(change["channel_id"])
            await message.answer('–û–ö')
            await state.finish()
            await message.answer(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
        else:
            times = message.text.split(',')
            for time in times:
                time.strip('\n').strip(' ')
                await message.answer(text=time)
                print(times)
            async with state.proxy() as cond:
                cond["times"] = times
                await message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –∏–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –ø–æ –∫–Ω–æ–ø–∫–µ', reply_markup=end_setup_time)

@dp.callback_query_handler(text='end_setup_time', state=CHANGE_time.time)
async def end_time_for_posts(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as chan:
        pgbotdb.channel_change_times_for_posts(chan['channel_id'], json.dumps(chan['times']))
        channel = pgbotdb.select_channel(chan["channel_id"])
        await call.message.answer(text='ü¶ã')
        await call.message.answer(text='–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏')
        await call.message.answer(text='ü¶ã')
        await call.message.answer(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
        await state.finish()


@dp.callback_query_handler(my_channels_callback.filter(row="conditions"))
async def change_chanel(call: CallbackQuery, callback_data:dict,state: FSMContext):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    conditions = pgbotdb.get_conditions(channel_id=channel[1])
    await call.message.answer(text= f'–í–∞—à–∏ —É—Å–ª–æ–≤–∏—è: {conditions}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ù–û–í–´–ï —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞')
    await call.message.answer(text= '–í–≤–æ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ","\n —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –Ω–∏–∂–µ\n–≤ —Ç–æ–ø–µ/–ø–µ—Ä–∏–æ–¥ - —Ü–µ–Ω–∞ (–±–µ–∑ —Ä—É–±)')
    await call.message.answer(text="""–¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏–µ:\n–ë–µ—Å—Å—Ä–æ—á–Ω–æ - 999\n‚ö†Ô∏è–ù–∞–ø—Ä–∏–º–µ—Ä: """)
    await call.message.answer(text="""1/24 - 200, 3/48 - 800, –ë–µ—Å—Å—Ä–æ—á–Ω–æ - 999""")
    await CHANGE_price.price.set()
    async with state.proxy() as change:
        change["channel_id"] = channel[1]
@dp.message_handler(state=CHANGE_price.price)
async def change_name(message:Message, state: FSMContext):
    async with state.proxy() as change:
        if message.text=='-':
            channel = pgbotdb.select_channel(change["channel_id"])
            await message.answer('–û–ö')
            await state.finish()
            await message.answer(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
        else:
            conditions = message.text.split(',')
            cond = []
            print(conditions)
            for condition in conditions:
                condition = condition.split('-')
                condition_time = condition[0].replace(" ", "")
                price = condition[1].replace(" ","")
                await message.answer(f'{condition_time} -  {price} —Ä—É–±')
                cond.append([condition_time, price])
                print(condition_time, price)
            change['conditions'] = json.dumps(cond)
            await message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å ^ ^', reply_markup=end_channel_setup)
   
@dp.callback_query_handler(text='end_channel_setup', state=CHANGE_price.price)
async def banned_themes_gotovo(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as chan:
        pgbotdb.conditions_change_condition(channel_id=chan['channel_id'],
        conditions=chan['conditions'])
        channel = pgbotdb.select_channel(chan["channel_id"])
        await call.message.answer(text='ü¶ã')
        await call.message.answer(text='–í–∞—à–∏ —É—Å–ª–æ–≤–∏—è –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏ü¶ã')
        await call.message.answer(text='ü¶ã')
        await call.message.answer(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
        await state.finish()


from keyboards.inline import change_channel_theme
from loader import themes
@dp.callback_query_handler(my_channels_callback.filter(row="channels_theme"))
async def change_chanel(call: CallbackQuery, callback_data:dict,state: FSMContext):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    await call.message.answer(f'–°—Ç–∞—Ä–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞: {channel[7]}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º–∞—Ç–∏–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏')
    await asyncio.sleep(2)
    await CHANGE_theme.theme.set()
    async with state.proxy() as change:
        change["channel_id"] = channel[1]
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º–∞—Ç–∏–∫—É', reply_markup=change_channel_theme(themes=themes))

@dp.callback_query_handler(text_contains=('change_th'),state=CHANGE_theme.theme)
async def change_theme(call:CallbackQuery, state: FSMContext):
    new_theme = call.data.split(':')[1]
    async with state.proxy() as change:
        pgbotdb.channel_change_channels_theme(change['channel_id'], new_theme)
        await call.message.answer(f'–¢–µ–º–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n–ù–æ–≤–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {new_theme}', reply_markup=back_to_channel_rows(change['channel_id']))
        print(new_theme)
        await state.finish()

from keyboards.inline import banned_theme_callback
@dp.callback_query_handler(my_channels_callback.filter(row="change-baned_theme"))
async def change_banned1(call: CallbackQuery, callback_data:dict,state: FSMContext):
    channel = pgbotdb.select_channel(callback_data['channel_id'])
    try: 
        json.loads(channel[8])
        b_chnls = json.loads(channel[8])
    except json.decoder.JSONDecodeError:
        b_chnls = None
    await call.message.answer(f'–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏: {b_chnls}\n–í—ã–±—Ä–∞—Ç—å –º–æ–∂–Ω–∞ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏')
    await asyncio.sleep(2)
    await CHANGE_banned.banned.set()
    async with state.proxy() as change:
        change["channel_id"] = channel[1]
        change["change_list"] = []
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏', reply_markup=banned_theme_callback(copy.deepcopy(themes)))
        await CHANGE_banned.next()


@dp.callback_query_handler(text_contains='banned', state=CHANGE_banned.list)
async def change_banned(call: CallbackQuery,state: FSMContext):
    async with state.proxy() as change: 
        print(call.data)
        theme_name = call.data.split(":")[1]
        if theme_name not in change["change_list"]:
            change["change_list"].append(theme_name)
        else: change["change_list"].remove(theme_name)
        print(change["change_list"])
        await call.message.edit_text('–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏', reply_markup=banned_theme_callback(copy.deepcopy(themes),change["change_list"]))
        
@dp.callback_query_handler(text='baned_next', state=CHANGE_banned.list)
async def banned_themes(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as change: 
        pgbotdb.channel_change_banned_themes(change['channel_id'], json.dumps(change["change_list"]))
        await call.message.answer(text= f'–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏ –Ω–∞:\n{change["change_list"]}',reply_markup=back_to_channel_rows(change['channel_id']))
        await state.finish()

from keyboards.inline import profile_kb_text
@dp.callback_query_handler(text='back_to_channels')
async def change_chanel(call: CallbackQuery):
    kb, text = profile_kb_text(call.from_user.id)
    await call.message.answer(text=text, reply_markup=kb)


@dp.callback_query_handler(text='back_to_my_channels')
async def change_chanel(call: CallbackQuery):
    await call.message.edit_text(text='ü¶ã–í–∞—à–∏ –∫–∞–Ω–∞–ª–∏', reply_markup=my_channels(call.from_user.id))


@dp.callback_query_handler(text_contains='b_t_s_c')
async def back_to_sertain_channel(call:CallbackQuery):
    print(call.data)
    channel_id = call.data.split(':')[1]
    channel = pgbotdb.select_channel(channel_id)
    await call.message.edit_text(text=f"–ö–∞–Ω–∞–ª: {channel[3]}", reply_markup=change_channel_parameters(channel[1]))
    