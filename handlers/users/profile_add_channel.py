from aiogram.types.callback_query import CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.message import Message
from aiogram import types
from keyboards.inline import cancel_btn, cancel_btn_with_channel_id_faq, channel_theme
from loader import dp
from data.config import ADX_POSTER_TOKEN,ADX_POSTER_USERNAME
from aiogram.dispatcher.storage import FSMContext
from aiogram.types.callback_query import CallbackQuery
from states.channel_in_pg import CHANNEL_IN_DB
import copy,requests,asyncio


@dp.callback_query_handler(text='add_channel',state=None)
async def add_channel(call: CallbackQuery, state: FSMContext):
    await CHANNEL_IN_DB.confirm_manager_bot.set()
    await call.message.edit_text(text='–°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ä–µ—à–∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª!', 
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        # [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ",url='https://telegra.ph/Podrobnaya-informaciya-ob-ADX-manager-bot-02-27-2')],
        [InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥‚úä",callback_data='yes_i_added_bot')]]))


    #TO_M 
    # p2p_qiwi_bool = pgbotdb.is_exist_qiwi_p2p_key(call.from_user.id)
    # if p2p_qiwi_bool:
    #     await CHANNEL_IN_DB.confirm_manager_bot.set()
    #     await call.message.edit_text(text='–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ @ADX_POSTER_bot –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π', 
    #     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
    #         [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ",url='https://telegra.ph/Podrobnaya-informaciya-ob-ADX-manager-bot-02-27-2')],
    #         [InlineKeyboardButton(text="–î–∞, —è –¥–æ–±–∞–≤–∏–ª",callback_data='yes_i_added_bot')]]))
    # else: 
    #     await call.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ü¶ã')


@dp.callback_query_handler(text='yes_i_added_bot',state=CHANNEL_IN_DB.confirm_manager_bot)
async def add_channel(call: CallbackQuery, state: FSMContext):
    await CHANNEL_IN_DB.channel_name.set()
    await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ ^ ^ ', reply_markup=cancel_btn)
    

@dp.message_handler(state=CHANNEL_IN_DB.channel_name)
async def add_channle_2etap(message: Message, state: FSMContext):
    name = message.text
    async with state.proxy() as channel: 
        channel["name"] = name
    await message.answer(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (—Å https)', reply_markup=cancel_btn)
    await CHANNEL_IN_DB.next()

@dp.message_handler(state=CHANNEL_IN_DB.channel_link)
async def btc_banker_dep(message: Message, state: FSMContext):
    link = message.text
    if 'join' in link or '+' in link: 
        await message.answer('–ú—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∏, –≤ —Å–∫–æ—Ä–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å–ø—Ä–∞–≤–∏–º!!!')
        await state.finish()
    elif 'https://' not in link: await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å https://')
    else:
        async with state.proxy() as channel: 
            channel["link"] = link
            channel['admin_id'] = message.from_user.id
        await message.answer(text='–ê–π—Ç–∏ –∫–∞–Ω–∞–ª–∞', reply_markup=cancel_btn_with_channel_id_faq)
        await CHANNEL_IN_DB.next()



@dp.message_handler(state=CHANNEL_IN_DB.channel_id)
async def btc_banker_dep(message: Message, state: FSMContext):
    id = message.text
    id_try = id
    try: 
        int(id_try)
    except Exception as err: 
        print(err)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return 0
    async with state.proxy() as channel: 
    #"""TO DO"""  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—á–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏
        # TO_M
        # username = check_username(ADX_POSTER_TOKEN, id, channel["link"].replace('https://t.me/',''))
        # if username == 'BOT KICKED OUT': 
        #     await message.answer('–í—ã —É–¥–∞–ª–∏–ª–∏ –Ω–∞—à–µ–≥–µ –±–æ—Ç–∞ @ADX_POSTER_bot —Å —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ ADX')
        #     await state.finish()
        #     return 0
        # elif not username: 
        #     await message.answer('–Æ–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º —á—Ç–æ –≤—ã –Ω–∞–º –ø—Ä–∏—Å–ª–∞–ª–∏ –∏–ª–∏ –≤—ã –µ–Ω –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑ ^ ^')
        #     await state.finish()
        #     return 0

        channel["id"] = id
    #TO_M –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω –º–æ–π –±–æ—Ç
    # status_adx_poster_admin = check_bot_in_channel_admin(ADX_POSTER_TOKEN,id, ADX_POSTER_USERNAME)
    status_adx_poster_admin = True
    if status_adx_poster_admin == "NO RIGHTS":
        await message.answer(text='–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –ø—Ä–∞–≤, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ —Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞–ª—è—Ç—å –∏—Ö')
        await state.finish()
        return 0
    elif status_adx_poster_admin:
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Å–≤–æ–µ–º—É –∫–∞–Ω–∞–ª—É', reply_markup=cancel_btn)
        await CHANNEL_IN_DB.next()
    else: 
        await message.answer(f'–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª —Å –∞–π–¥–∏ {id}, –∏—Å–ø—Ä–∞–≤–ª—å—Ç–µ —ç—Ç–æ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æü¶ãü¶ãü¶ã')
        await state.finish()
        return 0


@dp.message_handler(state=CHANNEL_IN_DB.description)
async def btc_banker_dep(message: Message, state: FSMContext):
    description = message.text
    async with state.proxy() as channel: 
        channel["description"] = description
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–≤–æ–µ–º—É –∫–∞–Ω–∞–ª—É', reply_markup=cancel_btn)
    await CHANNEL_IN_DB.next()


from keyboards.inline import channel_theme
from loader import themes
@dp.message_handler(state=CHANNEL_IN_DB.comment)
async def btc_banker_dep(message: Message, state: FSMContext):
    comment = message.text
    async with state.proxy() as channel: 
        channel["comment"] = comment
        await message.answer(text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É', reply_markup=channel_theme(themes=copy.deepcopy(themes)))
    await CHANNEL_IN_DB.next()

from keyboards.inline import banned_theme_callback
@dp.callback_query_handler(text_contains='theme', state=CHANNEL_IN_DB.channel_theme)
async def theme(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=10)
    #pg db insert theme in channels
    theme = call.data.split(':')[1]
    if theme == 'ü¶ã': theme = call.data.split(':')[0]
    async with state.proxy() as channel: 
        channel["theme"] = theme
        channel["banned"] = []
    await call.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏', reply_markup=banned_theme_callback(copy.deepcopy(themes)))
    await call.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –≤—ã—à–µ')
    await CHANNEL_IN_DB.next()


list_banned = []
@dp.callback_query_handler(text_contains='banned', state=CHANNEL_IN_DB.banned_themes)
async def banned_themes(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as channel: 
        theme_name = call.data.split(":")[1]
        if theme_name not in channel["banned"]:
            channel["banned"].append(theme_name)
        else: channel["banned"].remove(theme_name)
    print(channel["banned"])
    await call.message.edit_text('–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏', reply_markup=banned_theme_callback(copy.deepcopy(themes),channel["banned"]))
    

from keyboards.inline import conditions_prices_kb
from states.channel_in_pg import FSM_CONDITIONS
from loader import pgbotdb
@dp.callback_query_handler(text='baned_next', state=CHANNEL_IN_DB.banned_themes)
async def banned_themes_gotovo(call: CallbackQuery, state: FSMContext):
    await call.message.answer(text= 'ü¶ãü¶ãü¶ãü¶ãü¶ãü¶ãü¶ãü¶ãü¶ã')
    await call.message.answer(text= '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ ",":\n–ü—Ä–∏–º–µ—Ä:\n11:30, 14:00...')
    await CHANNEL_IN_DB.next()


from keyboards.inline import end_setup_time
@dp.message_handler(state=CHANNEL_IN_DB.time_for_posts)
async def time_for_posts(message: Message, state: FSMContext):
    times = message.text.split(',')
    for time in times:
        time.strip('\n').strip(' ')
        await message.answer(text=time)
    print(times)
    async with state.proxy() as cond:
        cond["times"] = times
    await message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –∏–ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –ø–æ –∫–Ω–æ–ø–∫–µ', reply_markup=end_setup_time)


@dp.callback_query_handler(text='end_setup_time', state=CHANNEL_IN_DB.time_for_posts)
async def end_time_for_posts(call: CallbackQuery, state: FSMContext):
    channel_id = ''
    async with state.proxy() as channel:
        pgbotdb.save_channel_info(
        channel_id=channel['id'], 
        admin_id=channel['admin_id'], 
        name=channel['name'], 
        link=channel['link'],
        description=channel['description'], 
        comment=channel['comment'], 
        channels_theme=channel['theme'], 
        banned_themes=json.dumps(channel['banned']),
        times_for_posts=json.dumps(channel['times']))
        channel_id = channel['id']
    await call.message.answer(text= 'ü¶ãü¶ãü¶ãü¶ãü¶ãü¶ãü¶ãü¶ãü¶ã')
    await call.message.answer(text= '–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ","\n —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –Ω–∏–∂–µ\n–≤ —Ç–æ–ø–µ/–ø–µ—Ä–∏–æ–¥ - —Ü–µ–Ω–∞ (–±–µ–∑ —Ä—É–±)')
#TO_M    # await call.message.answer(text="""–¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏–µ:\n–ë–µ—Å—Å—Ä–æ—á–Ω–æ - 999\n‚ö†Ô∏è*/24 –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–Ω–∞—á–µ –≤–∞—à –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω... \n–ù–∞–ø—Ä–∏–º–µ—Ä: """)
    await call.message.answer(text="""–¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏–µ:\n–ë–µ—Å—Å—Ä–æ—á–Ω–æ - 999\n‚ö†Ô∏è*/24 –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω–∏ –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ \n–ù–∞–ø—Ä–∏–º–µ—Ä: """)
    await call.message.answer(text="""1/24 - 200, 3/48 - 800, –ë–µ—Å—Å—Ä–æ—á–Ω–æ - 999""")
    await state.finish()
    await FSM_CONDITIONS.conditions.set()
    async with state.proxy() as channel:
        channel['id'] = channel_id

import json
from keyboards.inline import end_channel_setup
@dp.message_handler(state=FSM_CONDITIONS.conditions)
async def conditions(message: Message, state: FSMContext):
    
    conditions = message.text.split(',')
    cond = []
    print(conditions)
    for condition in conditions:
        condition = condition.split('-')
        condition_time = condition[0].replace(" ", "")
        price = condition[1].replace(" ","")
        await message.answer(f'{condition_time} -  {price} —Ä—É–±')
        cond.append([condition_time, price])
    async with state.proxy() as channel:
        pgbotdb.save_conditions(channel_id=channel['id'],
        conditions = json.dumps(cond))
    #save conditions
        print(condition_time, price)
    await message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å ^ ^', reply_markup=end_channel_setup)

    
@dp.callback_query_handler(text='end_channel_setup', state=FSM_CONDITIONS.conditions)
async def end_channel_set(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer('–í—ã —Ö–æ—Ä–æ—à–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ ü¶ã\n–í–∞—à –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞ \n–¢–µ–ø–µ—Ä—å –≤–∞—à –∫–∞–Ω–∞–ª —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–∏, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ ^ ^')


# @dp.callback_query_handler(text='con_pr_continue', state=CHANNEL_IN_DB.how_many_dates_of_posts)
# async def banned_themes_gotovo(call: CallbackQuery, state: FSMContext):
#     await call.message.answer(text= 'ü¶ãü¶ãü¶ãü¶ãü¶ãü¶ãü¶ãü¶ãü¶ã-------------')
#     await call.message.answer(text= 'naic')
#     await CHANNEL_IN_DB.next()



def check_username(bot_api,channel_id,username):
    URL = 'https://api.telegram.org/bot' + bot_api +'/getChat'
    PARAMS = {'chat_id':channel_id}
    r = requests.get(url = URL, params = PARAMS)
    data = r.json()
    print(data)
    print('channel_id')
    if data['ok'] == False:
        if data["description"] == "Forbidden: bot was kicked from the channel chat":return 'BOT KICKED OUT'
    try:
        bot_username = data["result"]['username']
    except KeyError: return False
    print(username, bot_username)
    return bool(username == bot_username)


def check_bot_in_channel_admin(bot_api,channel_id,bot_user_id):
    URL = 'https://api.telegram.org/bot' + bot_api +'/getChatMember'
    PARAMS = {'chat_id':channel_id,"user_id":bot_user_id}
    r = requests.get(url = URL, params = PARAMS)
    data = r.json()
    print(data)
    if data["result"]["status"] == 'administrator':
        can_post_messages = data['result']["can_post_messages"]
        can_edit_messages = data['result']["can_manage_chat"]
        requirements = (can_edit_messages,can_post_messages)
        print(requirements)
        if all(requirements): return True  
        else: return "NO RIGHTS"
    else: return False