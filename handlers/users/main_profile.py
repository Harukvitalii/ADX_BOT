from aiogram.dispatcher.storage import FSMContext
from aiogram.types.callback_query import CallbackQuery
from aiogram.types.message import Message
from aiogram import types
from loader import dp,pgbotdb
from keyboards.default.main_menu import main_menu
from keyboards.inline import profile_kb_text
from states.add_ad_post_state import AD_POST
from states.fsmqiwi_reqv import QIWI_P2P_REQV

@dp.message_handler(text='–ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    kb, text = profile_kb_text(message.from_user.id)
    await message.answer(text=text, reply_markup=kb)


@dp.callback_query_handler(text='back_to_my_profile')
async def profile(call: CallbackQuery):
    kb, text = profile_kb_text(call.from_user.id)
    await call.message.edit_text(text=text, reply_markup=kb)

@dp.callback_query_handler(text='back_to_my_profile',state=[QIWI_P2P_REQV.token,AD_POST.name])
async def profile(call: CallbackQuery, state:FSMContext):
    await state.finish()
    kb, text = profile_kb_text(call.from_user.id)
    await call.message.edit_text(text=text, reply_markup=kb)
    #—Å–ø–∏—Å–æ–∫ –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤


from keyboards. inline import withdrow_funds
@dp.callback_query_handler(text='withdrow')
async def withdrow(call: CallbackQuery):
    if True: await call.answer('–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–µ—Ñ –ø—Ä–æ–≥—Ä–∞–º–º–∏')
    else:
        user_info = pgbotdb.user_info(call.from_user.id)
        await call.message.answer(f'üëë –ë–∞–ª–∞–Ω—Å: {user_info[6]} RUB',reply_markup=withdrow_funds)

@dp.callback_query_handler(text='withdrow_btc_banker')
async def withdrow_btc_banker(call: CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º—É –≤—ã–≤–æ–¥–∞')






from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


kb_req = InlineKeyboardMarkup(
    inline_keyboard=[
        [ 
            InlineKeyboardButton("QIWI", callback_data='qiwi_reqv'),],    
        [ 
            InlineKeyboardButton("BTC banker", callback_data='btc_banker_reqv'),
        ],
        [ 
            InlineKeyboardButton("WEBMONEY", callback_data='wm_reqv'),],   
        [ 
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_my_finances'),],   
    ]
)


@dp.callback_query_handler(text='requisites')
async def requisites(call:CallbackQuery):
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=kb_req)

 #qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi
@dp.callback_query_handler(text='qiwi_reqv',state=None)
async def qiwi_reqv(call:CallbackQuery, state: FSMContext):
    await QIWI_P2P_REQV.token.set()
    qiwi_p2p_bool = pgbotdb.is_exist_qiwi_p2p_key(user_id = call.from_user.id)
    print(qiwi_p2p_bool)
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", url='https://telegra.ph/ADX-Informaciya-o-QIWI-P2P-model-02-20'))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_my_finances"))
    kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_btn"))
    if qiwi_p2p_bool:
        token = pgbotdb.get_p2p_qiwi_token(call.from_user.id)
        await call.message.edit_text(text=f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å P2P –∫–ª—é—á\n –í–∞—à –∫–ª—é—á: {token}\n, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Ç—Å—Ç–∏ –µ–≥–æ –∑–∞–Ω–æ–≤–æ", reply_markup=kb)
    else:
        await call.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ P2P –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π", reply_markup=kb)
    async with state.proxy() as kb_s:
        kb_s['kb'] = kb

@dp.message_handler(state=QIWI_P2P_REQV.token)
async def qiwi_reqvstate(mg: Message, state: FSMContext):
     async with state.proxy() as kb_s:
        kb=kb_s['kb']
        kb_s['token'] = mg.text
        kb.add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_p2pqiwi'))
        await mg.answer(text=f"–í–∞—à P2P –∫–ª—é—á –±—É–¥–µ—Ç: {mg.text}\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏", reply_markup=kb)


@dp.callback_query_handler(text='confirm_p2pqiwi',state=QIWI_P2P_REQV.token)
async def qiwi_reqv_call_confirm(call:CallbackQuery, state: FSMContext):
    async with state.proxy() as qiwi:
        pgbotdb.save_p2p_qiwi_token(user_id=call.from_user.id, token=qiwi['token'])
    await call.message.answer('–í–∞—à —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ ü¶ã')
    await state.finish()
# qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwi qiwiv qiwi qiwi qiwi qiwi qiwi qiwi qiwi 


"""TO DO""" 
@dp.callback_query_handler(text='btc_banker_reqv')
async def btc_banker_reqv(call:CallbackQuery):
    await call.answer(text='–°–∫–æ—Ä–æ...')


"""TO DO"""
@dp.callback_query_handler(text='wm_reqv')
async def wm_reqv(call:CallbackQuery):
    await call.answer(text='–°–∫–æ—Ä–æ...')



"""DONE"""
@dp.callback_query_handler(text='ref_program')
async def wm_reqv(call:CallbackQuery):
    await call.answer(text='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
    await call.message.answer('\n100—Ä—É–± –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ A–¥–º–∏–Ω–∞\n 65—Ä—É–± –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n<code>https://t.me/adx_inc_bot?start={}</code>'.format(call.from_user.id))



"""TO DO"""
@dp.callback_query_handler(text='operation_history')
async def wm_reqv(call:CallbackQuery):
    await call.answer(text='–°–∫–æ—Ä–æ –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π...')